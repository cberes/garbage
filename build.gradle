plugins {
    id 'java-library'
    id 'maven-publish'
    id 'signing'
    id 'jacoco'
    id 'com.github.kt3k.coveralls' version '2.12.2'
}

group = projectGroup
version = projectVersion
ext.isReleaseVersion = !version.endsWith('SNAPSHOT')

sourceCompatibility = 8
targetCompatibility = 8

repositories {
    mavenCentral()
}

dependencies {
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.4.0'
    testImplementation 'org.junit.jupiter:junit-jupiter-params:5.4.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.4.0'
    testImplementation 'org.hamcrest:hamcrest:2.1'
}

test {
    useJUnitPlatform()
}

jacocoTestReport {
    reports {
        csv.required = false
        html.required = true
        xml.required = true // coveralls plugin depends on xml format report
    }
}

java {
    withJavadocJar()
    withSourcesJar()
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId = 'garbage'
            from components.java

            pom {
                name = 'garbage'
                packaging = 'jar'
                description = 'Is it garbage day?'
                url = 'https://github.com/cberes/garbage'

                scm {
                    url = 'https://github.com/cberes/garbage.git'
                }

                licenses {
                    license {
                        name = 'GNU General Public License v3.0'
                        url = 'https://www.gnu.org/licenses/gpl-3.0.en.html'
                    }
                }

                developers {
                    developer {
                        id = 'cberes'
                        name = 'Corey Beres'
                        email = 'corey.beres@gmail.com'
                    }
                }
            }
        }
    }

    repositories {
        maven {
            def releasesRepoUrl = 'https://oss.sonatype.org/service/local/staging/deploy/maven2'
            def snapshotsRepoUrl = 'https://oss.sonatype.org/content/repositories/snapshots'

            name = 'ossrh'
            url = isReleaseVersion ? snapshotsRepoUrl : releasesRepoUrl
            credentials(PasswordCredentials)
        }
    }
}

signing {
    required { isReleaseVersion && gradle.taskGraph.hasTask('publish') }
    sign publishing.publications.mavenJava
}
